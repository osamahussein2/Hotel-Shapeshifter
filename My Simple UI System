using TMPro;
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class DialogueManager : MonoBehaviour
{
    public GameObject dialogueUI;
    public TMP_Text dialogueText;
    public GameObject choiceContainer;
    public GameObject choiceButtonPrefab;
    public List<Button> choiceButtons;
    public DialogueNode[] dialogueNodes;
    private int currentNodeIndex = 0;
    public bool dialogueActive = false;

    void Start()
    {
        dialogueUI.SetActive(false);
    }

    public void StartDialogue()
    {
        dialogueActive = true;
        dialogueUI.SetActive(true);
        currentNodeIndex = 0;
        ShowDialogue();
    }

    void ShowDialogue()
    {
        DialogueNode currentNode = dialogueNodes[currentNodeIndex];
        dialogueText.text = currentNode.dialogueText;
        ShowChoices(currentNode.choices);
    }

    public void OnChoiceSelected(int nextNodeIndex)
    {
        if (nextNodeIndex == -1)
        {
            EndDialogue();
        }
        else
        {
            currentNodeIndex = nextNodeIndex;
            ShowDialogue();
        }
    }

    void ShowChoices(List<Choice> choices)
    {
        for (int i = 0; i < choiceButtons.Count; i++)
        {
            if (i < choices.Count)
            {
                choiceButtons[i].gameObject.SetActive(true);
                choiceButtons[i].GetComponentInChildren<TMP_Text>().text = choices[i].choiceText;

                int nextNodeIndex = choices[i].nextNodeIndex;
                choiceButtons[i].onClick.RemoveAllListeners();
                choiceButtons[i].onClick.AddListener(() => OnChoiceSelected(nextNodeIndex));
            }
            else
            {
                choiceButtons[i].gameObject.SetActive(false);
            }
        }
    }

     void EndDialogue()
    {
        dialogueActive = false;
        dialogueUI.SetActive(false);
    }
}

using UnityEngine;

public class DialogueTrigger : MonoBehaviour
{
    public DialogueManager dialogueManager;

    private void OnMouseDown()
    {
        if (!dialogueManager.dialogueActive)
        {
            dialogueManager.StartDialogue();
        }
    }
}

[System.Serializable]
public class Choice
{
    public string choiceText;
    public int nextNodeIndex;
}

using System.Collections.Generic;

[System.Serializable]
public class DialogueNode
{
    public string dialogueText;
    public int nextNodeIndex;
    public List<Choice> choices;
}






Camera Movement (Very Simple and basic)

using UnityEngine;

public class CameraController : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float stopDistance = 2f;
    public LayerMask interactableLayer;
    public float closeEnough = 0.1f;

    private Vector3 targetPosition;
    private bool isMoving = false;
    private float fixedYPosition;

    void Start()
    {
        fixedYPosition = transform.position.y;
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            if (Physics.Raycast(ray, out RaycastHit hit, Mathf.Infinity, interactableLayer))
            {
                Vector3 directionToObject = (hit.collider.transform.position - transform.position).normalized;
                Vector3 target = hit.collider.transform.position - directionToObject * stopDistance;

                targetPosition = new Vector3(target.x, fixedYPosition, target.z);

                isMoving = true;
            }
        }

        if (isMoving)
        {
            MoveCamera();
        }
    }

    private void MoveCamera()
    {
  
        float distanceToTarget = Vector3.Distance(transform.position, targetPosition);

        if (distanceToTarget < closeEnough)
        {
            isMoving = false;
            transform.position = targetPosition; 
            return;
        }

        Vector3 direction = (targetPosition - transform.position).normalized;
        Vector3 step = direction * moveSpeed * Time.deltaTime;

        Vector3 newPosition = transform.position + step;
        transform.position = new Vector3(newPosition.x, fixedYPosition, newPosition.z);
    }
}
